---
    - name: Deploy Openstack Service
      hosts: kubemaster[0]
      tasks:
        - set_fact: kind=Deployment
        - set_fact: components="nova, neutron, glance, keystone, rabbitmq, mysql, memcached, horizon"
          when: components is not defined

        - name: Creating /tmp/{{ item.key }} directory
          file: path=/tmp/{{ item.key }} state=directory mode=0755
          with_dict: "{{ services }}"

        - name: generate service file 
          template: src=../templates/service.yaml.j2 dest=/tmp/{{ item.key }}/{{ item.key }}-svc.yaml
          with_dict: "{{ services }}"
          when: item.key in components

        - name: generate Deployment file 
          template: src=../templates/deployment.yaml.j2 dest=/tmp/{{ item.key }}/{{ item.key }}.yaml
          with_dict: "{{ services }}"
          when: item.key in components

        - name: generate jobs file 
          template: src=../templates/create-endpoint-job.yaml.j2 dest=/tmp/{{ item.key }}/{{ item.key }}-job.yaml
          with_dict: "{{ services }}"
          when: item.key in components

        - name: generate endpoint.sh 
          template: src=../templates/create-endpoint.sh.j2 dest=/tmp/{{ item.key }}/{{ item.key }}-endpoint.sh
          with_dict: "{{ services }}"
          when: item.key in components
          ignore_errors: true

        - name: Generate keystone config
          template: src=../templates/{{ item.src }} dest=/tmp/keystone/{{ item.dest }}
          with_items:
            - { src: keystone/keystone.conf, dest: keystone.conf }
            - { src: keystone/apache2.conf, dest: apache2.conf }
            - { src: keystone/run.sh, dest: run.sh }
            - { src: openrc.j2, dest: openrc }

        - name: Create configmap for keystone config
          shell: kubectl --namespace={{ namespace }} create configmap {{ item.key }} --from-file=/tmp/keystone/{{ item.value }}
          with_items: 
            - { key: keystone-endpoint, value: keystone-endpoint.sh }
            - { key: keystone-conf, value: keystone.conf }
            - { key: apache-conf, value: apache2.conf }
            - { key: keystone-run, value: run.sh }
            - { key: openrc, value: openrc }
          ignore_errors: true

        - name: Generate glance config
          template: src=../templates/glance/{{ item.src }} dest=/tmp/glance/{{ item.dest }}
          with_items:
            - { src: glance-api.conf, dest: glance-api.conf }
            - { src: glance-registry.conf, dest: glance-registry.conf }
            - { src: run.sh, dest: run.sh }

        - name: Create configmap for glance config
          shell: kubectl --namespace={{ namespace }} create configmap {{ item.key }} --from-file=/tmp/glance/{{ item.value }}
          with_items: 
            - { key: glance-endpoint, value: glance-endpoint.sh }
            - { key: glance-api, value: glance-api.conf }
            - { key: glance-registry, value: glance-registry.conf }
            - { key: glance-run, value: run.sh }


        - name: Generate nova config
          template: src=../templates/nova/{{ item.src }} dest=/tmp/nova/{{ item.dest }}
          with_items:
            - { src: nova.conf, dest: nova.conf }
            - { src: run.sh, dest: run.sh }

        - name: Create configmap for nova config
          shell: kubectl --namespace={{ namespace }} create configmap {{ item.key }} --from-file=/tmp/nova/{{ item.value }}
          with_items: 
            - { key: nova-endpoint, value: nova-endpoint.sh }
            - { key: nova-conf, value: nova.conf }
            - { key: nova-run, value: run.sh }


        - name: Generate neutron config
          template: src=../templates/neutron/{{ item.src }} dest=/tmp/neutron/{{ item.dest }}
          with_items:
            - { src: neutron.conf, dest: neutron.conf }
            - { src: dhcp_agent.ini, dest: dhcp_agent.ini }
            - { src: l3_agent.ini, dest: l3_agent.ini }
            - { src: linuxbridge_agent.ini, dest: linuxbridge_agent.ini }
            - { src: metadata_agent.ini, dest: metadata_agent.ini }
            - { src: ml2_conf.ini, dest: ml2_conf.ini }
            - { src: run.sh, dest: run.sh }

        - name: Create configmap for neutron config
          shell: kubectl --namespace={{ namespace }} create configmap {{ item.key }} --from-file=/tmp/neutron/{{ item.value }}
          with_items: 
            - { key: neutron-endpoint, value: neutron-endpoint.sh }
            - { key: neutron-dhcp, value: dhcp_agent.ini }
            - { key: neutron-l3, value: l3_agent.ini }
            - { key: neutron-linuxbridge, value: linuxbridge_agent.ini }
            - { key: neutron-metadata, value: metadata_agent.ini }
            - { key: neutron-ml2, value: ml2_conf.ini }
            - { key: neutron-conf, value: neutron.conf }
            - { key: neutron-run, value: run.sh }

        - name: Creating service
          shell: kubectl create -f /tmp/{{ item.key }}/{{ item.key }}-svc.yaml
          with_dict: "{{ services }}"

        - name: Deploy services
          shell: kubectl create -f /tmp/{{ item.key }}/{{ item.key }}.yaml
          with_dict: "{{ services }}"

        - name: Deploy {{ item.key }}
          shell: kubectl create -f /tmp/{{ item.key }}/{{ item.key }}-job.yaml
          with_dict: "{{ services }}"
          when: item.key != "mysql" and item.key != "rabbitmq" and item.key != "horizon" and item.key != "memcached" and item.key in components

        - set_fact: kind=Replicas
        - name: generate Replicas file
          template: src=../templates/deployment.j2 dest=/tmp/{{ item.key }}-replica.yaml
          with_dict: "{{ services }}"
          when: item.key in components
